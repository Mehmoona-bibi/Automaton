<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
const int N = 6;         // # trains
typedef int[0,N-1] id_t;

chan        appr[N], stop[N], leave[N];
urgent chan go[N];
</declaration>
	<template>
		<name x="40" y="16">Train</name>
		<parameter>const id_t id</parameter>
		<declaration>clock x;</declaration>
		<location id="id0" x="-323" y="-34">
			<name x="-371" y="-50">Safe</name>
		</location>
		<location id="id1" x="-243" y="190">
			<name x="-227" y="198">Stop</name>
		</location>
		<location id="id2" x="-163" y="-34">
			<name x="-147" y="-50">Cross</name>
			<label kind="invariant" x="-147" y="-34">x&lt;=5</label>
		</location>
		<location id="id3" x="-323" y="102">
			<name x="-387" y="86">Appr</name>
			<label kind="invariant" x="-387" y="102">x&lt;=20</label>
		</location>
		<location id="id4" x="-163" y="102">
			<name x="-147" y="86">Start</name>
			<label kind="invariant" x="-147" y="102">x&lt;= 15</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-235" y="30">x&gt;=10</label>
			<label kind="assignment" x="-235" y="46">x=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-331" y="150">x&lt;=10</label>
			<label kind="synchronisation" x="-331" y="166">stop[id]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-235" y="-74">x&gt;=3</label>
			<label kind="synchronisation" x="-235" y="-58">leave[id]!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-387" y="-2">appr[id]!</label>
			<label kind="assignment" x="-387" y="14">x=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-155" y="30">x&gt;=7</label>
			<label kind="assignment" x="-155" y="46">x=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-195" y="150">go[id]?</label>
			<label kind="assignment" x="-195" y="166">x=0</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Gate</name>
		<declaration>id_t list[N+1];
int[0,N] len;
// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
}
// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}
// Returns the front element of the queue
id_t front()
{
   return list[0];
}
// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration>
		<location id="id5" x="-229" y="215">
			<committed/>
		</location>
		<location id="id6" x="-229" y="119">
			<name x="-213" y="119">Occ</name>
		</location>
		<location id="id7" x="-229" y="-17">
			<name x="-213" y="-49">Free</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="select" x="-317" y="143">e : id_t</label>
			<label kind="synchronisation" x="-317" y="159">appr[e]?</label>
			<label kind="assignment" x="-317" y="175">enqueue(e)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="select" x="-125" y="7">e : id_t</label>
			<label kind="guard" x="-125" y="23">e == front()</label>
			<label kind="synchronisation" x="-125" y="39">leave[e]?</label>
			<label kind="assignment" x="-125" y="55">dequeue()</label>
			<nail x="-133" y="119"/>
			<nail x="-133" y="-17"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-197" y="159">stop[tail()]!</label>
			<nail x="-205" y="167"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-317" y="23">len &gt; 0</label>
			<label kind="synchronisation" x="-317" y="39">go[front()]!</label>
			<nail x="-325" y="-17"/>
			<nail x="-325" y="119"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-221" y="7">e : id_t</label>
			<label kind="guard" x="-221" y="23">len == 0</label>
			<label kind="synchronisation" x="-221" y="39">appr[e]?</label>
			<label kind="assignment" x="-221" y="55">enqueue(e)</label>
		</transition>
	</template>
	<system>system Train, Gate;
</system>
	<queries>
		<query>
			<formula>E&lt;&gt; Gate.Occ
			</formula>
			<comment>Gate can receive (and store in queue) msg's from approaching trains.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross
			</formula>
			<comment>Train 0 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(1).Cross
			</formula>
			<comment>Train 1 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and Train(1).Stop
			</formula>
			<comment>Train 0 can be crossing bridge while Train 1 is waiting to cross.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and (forall (i : id_t) i != 0 imply Train(i).Stop)
			</formula>
			<comment>Train 0 can cross bridge while the other trains are waiting to cross.
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_t) forall (j : id_t) Train(i).Cross &amp;&amp; Train(j).Cross imply i == j
			</formula>
			<comment>There is never more than one train crossing the bridge (at
any time instance).
			</comment>
		</query>
		<query>
			<formula>A[] Gate.list[N] == 0
			</formula>
			<comment>There can never be N elements in the queue (thus the array will not overflow).
			</comment>
		</query>
		<query>
			<formula>Train(0).Appr --&gt; Train(0).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.
			</comment>
		</query>
		<query>
			<formula>Train(1).Appr --&gt; Train(1).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(2).Appr --&gt; Train(2).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(3).Appr --&gt; Train(3).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(4).Appr --&gt; Train(4).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(5).Appr --&gt; Train(5).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system is deadlock-free.
			</comment>
		</query>
	</queries>
</nta>
